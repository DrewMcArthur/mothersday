{"version":3,"sources":["Card.js","CardHider.js","App.js","serviceWorker.js","index.js"],"names":["Card","React","Component","_React$Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","pageNumber","direction","cardHider","handleFlip","react_default","a","createElement","className","dist_default","height","width","orientation","pageBackground","showHint","flipOnTouch","animationDuration","alt","src","href","App","Card_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ac2a350.chunk.js","sourcesContent":["import React from 'react';\nimport FlipPage from 'react-flip-page';\nimport CardHider from './CardHider';\n\nexport class Card extends React.Component\n{\n  constructor ( props )\n  {\n    super( props )\n    // this.cardHider = <CardHider ref={( component ) => { this.cardHider = component }} />\n  }\n\n  handleFlip ( pageNumber, direction )\n  {\n    this.cardHider.handleFlip( pageNumber )\n  }\n\n  render ()\n  {\n    return (\n      <div className='cardContainer'>\n        <FlipPage\n          className='cardcard'\n          height={600}\n          width={1000}\n          orientation={\"horizontal\"}\n          pageBackground={\"rgb(237, 229, 211)\"}\n          // onPageChange={this.handleFlip} // get this working later\n          showHint={true}\n          flipOnTouch={true}\n          animationDuration={400}>\n\n          {/* front page */}\n          <article className='front'>\n            <div className='left blank'>\n              <img className='tulips' alt='tulips' src='/mothersday/tulips.png' />\n            </div>\n            <div className='right'>\n              <h1>Happy Mothers' Day!</h1>\n              <img className='bmji n1' alt='bitmoji one' src='/mothersday/front-bmji-1.png' />\n              <img className='bmji n2' alt='bitmoji two' src='/mothersday/front-bmji-2.png' />\n              <img className='tulip' alt='tulip' src='/mothersday/tulip.png' />\n              <img className='tulip n2' alt='tulip' src='/mothersday/tulip.png' />\n              <img className='tulip n3' alt='tulip' src='/mothersday/tulip.png' />\n              <img className='tulip n4' alt='tulip' src='/mothersday/tulip.png' />\n              <img className='tulip n5' alt='tulip' src='/mothersday/tulip.png' />\n            </div>\n          </article>\n\n          {/* middle page */}\n          <article className='middle'>\n            <div className='left'>\n              <p>Happy Mothers' Day!! I hope today is full of joy and happiness for both of you.</p>\n              <p>I can't wait for the summer, when it's Mothers' day every day!</p>\n              <p>Here's some bitmoji hugs to hold you over till next week! ❤️</p>\n              <img className='abby bmji n4' alt='bitmoji one' src='/mothersday/abby_bmji_4.png' />\n              <img className='abby bmji n3' alt='bitmoji two' src='/mothersday/abby_bmji_3.png' />\n              <img className='drew bmji n3' alt='bitmoji three' src='/mothersday/drew_bmji_3.png' />\n            </div>\n            <div className='right'>\n              <p>See you soon!</p>\n              <p>Love and miss you both!!</p>\n              <img className='drew bmji n1' alt='bitmoji one' src='/mothersday/drew_bmji_1.png' />\n              <img className='drew bmji n2' alt='bitmoji two' src='/mothersday/drew_bmji_2.png' />\n              <img className='abby bmji n1' alt='bitmoji three' src='/mothersday/abby_bmji_1.png' />\n              <img className='abby bmji n2' alt='bitmoji four' src='/mothersday/abby_bmji_2.png' />\n              <div className='fromText'>\n                <p>Happy Day!</p>\n                <p>Love, Drew and Abby</p>\n              </div>\n            </div>\n          </article>\n\n          {/* back page */}\n          <article className='back'>\n            <div className='left'>\n              <div className=\"back-text\">\n                <p>Made by Drew!</p>\n                <a href='https://mcarthur.in/'>mcarthur.in/</a>\n              </div>\n            </div>\n            <div className='right blank'>\n            </div>\n          </article>\n        </FlipPage>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nexport default class CardHider extends React.Component\n{\n  constructor ( props )\n  {\n    super( props )\n    if ( props.ref )\n    {\n      props.ref( this )\n    }\n    this.hiderWidth = ( window.innerWidth / 2 ) - 3;\n  }\n\n  handleFlip ( pageNumber )\n  {\n    console.log( pageNumber )\n  }\n\n  hide ()\n  {\n    this.cardHider.hide()\n  }\n\n  render ()\n  {\n    return ( <div\n      className='cardHider'\n      style={{ width: this.hiderWidth + \"px\" }}\n      ref={( component ) =>\n      {\n        this.cardHider = component\n      }} /> )\n  }\n}\n","import React from 'react';\nimport { Card } from './Card';\n\nimport './App.css';\n\nfunction App ()\n{\n  // get half the screen width\n\n  return (\n    <div className='app'>\n      <Card />\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}